/* eslint-disable camelcase */
import { Router } from 'express'
import { middleware as query } from 'querymen'
import { middleware as body } from 'bodymen'
import { master, token } from '../../services/passport'
import { index, show, create, update, destroy } from './$modelname$.controller'
import { $modelname$DataSchema } from './$modelname$.model'

const router = new Router()
const {
    $attributestittles$
} = $modelname$DataSchema

/**
 * @api {get} /$modelname$s Retrieve $modelname$s
 * @apiName Retrieve$modelname$s
 * @apiGroup $modelname$
 * @apiPermission admin
 * @apiParam {String} access_token $modelname$ access_token.
 * @apiUse listParams
 * @apiSuccess {Object[]} $modelname$s List of $modelname$s.
 * @apiError {Object} 400 Some parameters may contain invalid values.
 * @apiError 401 Admin access only.
 */
router.get('/',
  token({ required: true, roles: ['admin'] }),
  query(),
  index)



/**
 * @api {get} /$modelname$s/:id Retrieve $modelname$
 * @apiName Retrieve$modelname$
 * @apiGroup $modelname$
 * @apiPermission public
 * @apiSuccess {Object} $modelname$ $modelname$'s data.
 * @apiError 404 $modelname$ not found.
 */
router.get('/:id',
  show)

/**
 * @api {post} /$modelname$s Create $modelname$
 * @apiName Create$modelname$
 * @apiGroup $modelname$
 * @apiPermission master
 * @apiParam {String} access_token Master access_token.
 * @apiSuccess (Sucess 201) {Object} $modelname$ $modelname$'s data.
 * @apiError {Object} 400 Some parameters may contain invalid values.
 * @apiError 401 Master access only.
 * @apiError 409 Email already registered.
 */
router.post('/',
  master(),
  body({
      ...$modelname$DataSchema
  }),
  create)

/**
 * @api {put} /$modelname$s/:id Update $modelname$
 * @apiName Update$modelname$
 * @apiGroup $modelname$
 * @apiPermission $modelname$
 * @apiParam {String} access_token $modelname$ access_token.
 * @apiSuccess {Object} $modelname$ $modelname$'s data.
 * @apiError {Object} 400 Some parameters may contain invalid values.
 * @apiError 401 Current $modelname$ or admin access only.
 * @apiError 404 $modelname$ not found.
 */
router.put('/:id',
  token({ required: true }),
  body({
      ...$modelname$DataSchema
  }),
  update)


/**
 * @api {delete} /$modelname$s/:id Delete $modelname$
 * @apiName Delete$modelname$
 * @apiGroup $modelname$
 * @apiPermission admin
 * @apiParam {String} access_token $modelname$ access_token.
 * @apiSuccess (Success 204) 204 No Content.
 * @apiError 401 Admin access only.
 * @apiError 404 $modelname$ not found.
 */
router.delete('/:id',
  token({ required: true, roles: ['admin'] }),
  destroy)

export default router
